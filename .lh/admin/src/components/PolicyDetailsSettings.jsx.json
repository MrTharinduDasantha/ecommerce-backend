{
    "sourceFile": "admin/src/components/PolicyDetailsSettings.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753159147772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753159165985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useState, useEffect } from \"react\";\r\n import { FaEdit, FaEye, FaEyeSlash } from \"react-icons/fa\";\r\n-import ReactQuill from \"react-quill\";\r\n+import ReactQuill from \"react-quill-new\";\r\n import \"react-quill-new/dist/quill.snow.css\";\r\n import {\r\n   fetchPolicyDetailsSetting,\r\n   updatePolicyDetailsSetting,\r\n"
                },
                {
                    "date": 1753159322155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,444 @@\n+import { useState, useEffect } from \"react\";\r\n+import { FaEdit, FaEye, FaEyeSlash } from \"react-icons/fa\";\r\n+import ReactQuill from \"react-quill\";\r\n+import \"react-quill-new/dist/quill.snow.css\";\r\n+import {\r\n+  fetchPolicyDetailsSetting,\r\n+  updatePolicyDetailsSetting,\r\n+} from \"../api/setting\";\r\n+import toast from \"react-hot-toast\";\r\n+\r\n+const PolicyDetailsSettings = () => {\r\n+  const [policyDetailsSetting, setPolicyDetailsSetting] = useState(null);\r\n+  const [isEditing, setIsEditing] = useState(false);\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+  const [showPreview, setShowPreview] = useState(false);\r\n+  const [activeTab, setActiveTab] = useState(\"legal\");\r\n+\r\n+  // Policy content states\r\n+  const [legalPolicyContent, setLegalPolicyContent] = useState(\"\");\r\n+  const [privacyPolicyContent, setPrivacyPolicyContent] = useState(\"\");\r\n+  const [securityPolicyContent, setSecurityPolicyContent] = useState(\"\");\r\n+  const [termsOfServiceContent, setTermsOfServiceContent] = useState(\"\");\r\n+\r\n+  // Quill editor configuration\r\n+  const quillModules = {\r\n+    toolbar: [\r\n+      [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n+      [\"bold\", \"italic\", \"underline\", \"strike\"],\r\n+      [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n+      [{ indent: \"-1\" }, { indent: \"+1\" }],\r\n+      [{ align: [] }],\r\n+      [\"link\", \"blockquote\", \"code-block\"],\r\n+      [{ color: [] }, { background: [] }],\r\n+      [\"clean\"],\r\n+    ],\r\n+  };\r\n+\r\n+  const quillFormats = [\r\n+    \"header\",\r\n+    \"bold\",\r\n+    \"italic\",\r\n+    \"underline\",\r\n+    \"strike\",\r\n+    \"list\",\r\n+    \"indent\",\r\n+    \"align\",\r\n+    \"link\",\r\n+    \"blockquote\",\r\n+    \"code-block\",\r\n+    \"color\",\r\n+    \"background\",\r\n+  ];\r\n+\r\n+  // Policy tabs configuration\r\n+  const policyTabs = [\r\n+    {\r\n+      id: \"legal\",\r\n+      label: \"Legal Policy\",\r\n+      content: legalPolicyContent,\r\n+      setter: setLegalPolicyContent,\r\n+    },\r\n+    {\r\n+      id: \"privacy\",\r\n+      label: \"Privacy Policy\",\r\n+      content: privacyPolicyContent,\r\n+      setter: setPrivacyPolicyContent,\r\n+    },\r\n+    {\r\n+      id: \"security\",\r\n+      label: \"Security Policy\",\r\n+      content: securityPolicyContent,\r\n+      setter: setSecurityPolicyContent,\r\n+    },\r\n+    {\r\n+      id: \"terms\",\r\n+      label: \"Terms of Service\",\r\n+      content: termsOfServiceContent,\r\n+      setter: setTermsOfServiceContent,\r\n+    },\r\n+  ];\r\n+\r\n+  // Check if all required fields are filled\r\n+  const canShowPreview = () => {\r\n+    const stripHtml = (html) => {\r\n+      // Remove HTML tags and check if there's actual text content\r\n+      const temp = document.createElement(\"div\");\r\n+      temp.innerHTML = html;\r\n+      return temp.textContent || temp.innerText || \"\";\r\n+    };\r\n+\r\n+    return (\r\n+      stripHtml(legalPolicyContent).trim() &&\r\n+      stripHtml(privacyPolicyContent).trim() &&\r\n+      stripHtml(securityPolicyContent).trim() &&\r\n+      stripHtml(termsOfServiceContent).trim()\r\n+    );\r\n+  };\r\n+\r\n+  // Toggle preview based on validation\r\n+  const togglePreview = () => {\r\n+    if (!showPreview) {\r\n+      if (canShowPreview()) {\r\n+        setShowPreview(true);\r\n+        // Reset to first tab when showing preview\r\n+        setActiveTab(\"legal\");\r\n+      } else {\r\n+        toast.error(\r\n+          \"Please fill in all policy content before viewing the preview\"\r\n+        );\r\n+      }\r\n+    } else {\r\n+      setShowPreview(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Load policy details settings when component mounts\r\n+  useEffect(() => {\r\n+    async function loadPolicyDetailsSetting() {\r\n+      try {\r\n+        setIsLoading(true);\r\n+        const data = await fetchPolicyDetailsSetting();\r\n+        if (data) {\r\n+          setPolicyDetailsSetting(data);\r\n+          setLegalPolicyContent(data.Legal_Policy_Content || \"\");\r\n+          setPrivacyPolicyContent(data.Privacy_Policy_Content || \"\");\r\n+          setSecurityPolicyContent(data.Security_Policy_Content || \"\");\r\n+          setTermsOfServiceContent(data.Terms_Of_Service_Content || \"\");\r\n+        }\r\n+      } catch (error) {\r\n+        toast.error(error.message || \"Failed to load policy details settings\");\r\n+      } finally {\r\n+        setIsLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    loadPolicyDetailsSetting();\r\n+  }, []);\r\n+\r\n+  // Edit handler\r\n+  const handleEdit = () => {\r\n+    setIsEditing(true);\r\n+    setShowPreview(false);\r\n+    // Reset to first tab when editing\r\n+    setActiveTab(\"legal\");\r\n+\r\n+    // Force refresh of ReactQuill editor\r\n+    setTimeout(() => {\r\n+      window.dispatchEvent(new Event(\"resize\"));\r\n+    }, 100);\r\n+  };\r\n+\r\n+  // Tab switch handler\r\n+  const handleTabSwitch = (tabId) => {\r\n+    setActiveTab(tabId);\r\n+    // If in editing mode, refresh the editor after tab switch\r\n+    if (isEditing) {\r\n+      setTimeout(() => {\r\n+        window.dispatchEvent(new Event(\"resize\"));\r\n+      }, 50);\r\n+    }\r\n+  };\r\n+\r\n+  // Save handler\r\n+  const handleSave = async (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (!canShowPreview()) {\r\n+      toast.error(\"Please fill in all policy content\");\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      setIsLoading(true);\r\n+\r\n+      const policyData = {\r\n+        legalPolicyContent,\r\n+        privacyPolicyContent,\r\n+        securityPolicyContent,\r\n+        termsOfServiceContent,\r\n+      };\r\n+\r\n+      const updatedSetting = await updatePolicyDetailsSetting(policyData);\r\n+      toast.success(\"Policy details saved successfully\");\r\n+      setPolicyDetailsSetting(updatedSetting);\r\n+      setIsEditing(false);\r\n+    } catch (error) {\r\n+      toast.error(error.message || \"Failed to save policy details\");\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Cancel handler\r\n+  const handleCancel = () => {\r\n+    setIsEditing(false);\r\n+    setShowPreview(false);\r\n+    setActiveTab(\"legal\");\r\n+\r\n+    if (policyDetailsSetting) {\r\n+      // Restore state from policyDetailsSetting\r\n+      setLegalPolicyContent(policyDetailsSetting.Legal_Policy_Content || \"\");\r\n+      setPrivacyPolicyContent(\r\n+        policyDetailsSetting.Privacy_Policy_Content || \"\"\r\n+      );\r\n+      setSecurityPolicyContent(\r\n+        policyDetailsSetting.Security_Policy_Content || \"\"\r\n+      );\r\n+      setTermsOfServiceContent(\r\n+        policyDetailsSetting.Terms_Of_Service_Content || \"\"\r\n+      );\r\n+    } else {\r\n+      // If no policyDetailsSetting, reset to initial state\r\n+      setLegalPolicyContent(\"\");\r\n+      setPrivacyPolicyContent(\"\");\r\n+      setSecurityPolicyContent(\"\");\r\n+      setTermsOfServiceContent(\"\");\r\n+    }\r\n+  };\r\n+\r\n+  // Get current active tab content\r\n+  const getCurrentTabContent = () => {\r\n+    switch (activeTab) {\r\n+      case \"legal\":\r\n+        return legalPolicyContent;\r\n+      case \"privacy\":\r\n+        return privacyPolicyContent;\r\n+      case \"security\":\r\n+        return securityPolicyContent;\r\n+      case \"terms\":\r\n+        return termsOfServiceContent;\r\n+      default:\r\n+        return \"\";\r\n+    }\r\n+  };\r\n+\r\n+  // Preview Component\r\n+  const PolicyPreview = () => {\r\n+    const renderTabContent = () => {\r\n+      const content = getCurrentTabContent();\r\n+      return (\r\n+        <div\r\n+          className=\"prose max-w-none\"\r\n+          dangerouslySetInnerHTML={{ __html: content }}\r\n+        />\r\n+      );\r\n+    };\r\n+\r\n+    return (\r\n+      <div className=\"space-y-6\">\r\n+        <h3 className=\"text-lg font-semibold text-[#1D372E] mb-4\">\r\n+          Policy Details Preview\r\n+        </h3>\r\n+\r\n+        {/* Tab Navigation */}\r\n+        <div className=\"flex flex-wrap gap-2 border-b border-gray-200 mb-6\">\r\n+          {policyTabs.map((tab) => (\r\n+            <button\r\n+              key={tab.id}\r\n+              type=\"button\"\r\n+              onClick={() => handleTabSwitch(tab.id)}\r\n+              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n+                activeTab === tab.id\r\n+                  ? \"border-[#5CAF90] text-[#5CAF90]\"\r\n+                  : \"border-transparent text-gray-500 hover:text-gray-700\"\r\n+              }`}\r\n+            >\r\n+              {tab.label}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        {/* Tab Content */}\r\n+        <div className=\"bg-white p-6 text-[#1D372E] rounded-lg border border-gray-200 min-h-[400px]\">\r\n+          {renderTabContent()}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  if (isLoading && !policyDetailsSetting) {\r\n+    return (\r\n+      <div className=\"card bg-base-100 shadow-md\">\r\n+        <div className=\"card-body\">\r\n+          <div className=\"flex justify-center items-center h-40\">\r\n+            <span className=\"loading loading-spinner loading-lg text-primary\"></span>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"card bg-white shadow-md relative\">\r\n+      <div className=\"card-body\">\r\n+        {/* Header Section */}\r\n+        <div className=\"mb-6\">\r\n+          <div className=\"flex items-center gap-2 mb-4\">\r\n+            <div className=\"w-1 h-6 bg-[#5CAF90]\"></div>\r\n+            <h2 className=\"text-lg md:text-xl font-bold text-[#1D372E]\">\r\n+              Manage Policy Details\r\n+            </h2>\r\n+          </div>\r\n+          {/* Action Buttons */}\r\n+          <div className=\"flex gap-2 md:absolute md:top-6 md:right-6\">\r\n+            {!isEditing && !showPreview && (\r\n+              <button\r\n+                onClick={handleEdit}\r\n+                className=\"btn btn-primary gap-2 bg-[#5CAF90] border-[#5CAF90] hover:bg-[#4a9a7d] btn-sm md:btn-md\"\r\n+              >\r\n+                <FaEdit className=\"w-4 h-4\" /> Edit\r\n+              </button>\r\n+            )}\r\n+            {!isEditing || canShowPreview() ? (\r\n+              <button\r\n+                onClick={togglePreview}\r\n+                className={`btn gap-2 btn-sm md:btn-md ${\r\n+                  showPreview\r\n+                    ? \"bg-[#1D372E] border-[#1D372E] hover:bg-[#162a23]\"\r\n+                    : \"bg-[#5CAF90] border-[#5CAF90] hover:bg-[#4a9a7d]\"\r\n+                }`}\r\n+              >\r\n+                {showPreview ? (\r\n+                  <>\r\n+                    <FaEyeSlash className=\"w-4 h-4\" /> Hide Preview\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <FaEye className=\"w-4 h-4\" /> Show Preview\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            ) : null}\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {showPreview ? (\r\n+          <PolicyPreview />\r\n+        ) : (\r\n+          <form onSubmit={handleSave}>\r\n+            {/* Tab Navigation */}\r\n+            <div className=\"flex flex-wrap gap-2 border-b border-gray-200 mb-6\">\r\n+              {policyTabs.map((tab) => (\r\n+                <button\r\n+                  key={tab.id}\r\n+                  type=\"button\"\r\n+                  onClick={() => setActiveTab(tab.id)}\r\n+                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n+                    activeTab === tab.id\r\n+                      ? \"border-[#5CAF90] text-[#5CAF90]\"\r\n+                      : \"border-transparent text-gray-500 hover:text-gray-700\"\r\n+                  }`}\r\n+                >\r\n+                  {tab.label}\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+\r\n+            {/* Tab Content */}\r\n+            <div className=\"mb-8\">\r\n+              {/* Only render the active tab's content */}\r\n+              {(() => {\r\n+                const currentTab = policyTabs.find(\r\n+                  (tab) => tab.id === activeTab\r\n+                );\r\n+                if (!currentTab) return null;\r\n+\r\n+                return (\r\n+                  <div className=\"form-control\">\r\n+                    <label className=\"label\">\r\n+                      <span className=\"label-text text-[#1D372E] text-lg font-medium\">\r\n+                        {currentTab.label} Content\r\n+                      </span>\r\n+                    </label>\r\n+                    {isEditing ? (\r\n+                      <div className=\"border border-[#1D372E] text-[#1D372E] rounded-lg\">\r\n+                        <ReactQuill\r\n+                          key={`${currentTab.id}-${isEditing}`}\r\n+                          value={currentTab.content}\r\n+                          onChange={currentTab.setter}\r\n+                          modules={quillModules}\r\n+                          formats={quillFormats}\r\n+                          theme=\"snow\"\r\n+                          style={{ minHeight: \"300px\" }}\r\n+                          placeholder={`Enter ${currentTab.label.toLowerCase()} content...`}\r\n+                        />\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"border border-[#1D372E] rounded-lg p-4 bg-white min-h-[300px] overflow-auto\">\r\n+                        {currentTab.content ? (\r\n+                          <div\r\n+                            className=\"prose max-w-none text-[#1D372E]\"\r\n+                            dangerouslySetInnerHTML={{\r\n+                              __html: currentTab.content,\r\n+                            }}\r\n+                          />\r\n+                        ) : (\r\n+                          <div className=\"text-gray-400 italic\">\r\n+                            No content available for{\" \"}\r\n+                            {currentTab.label.toLowerCase()}\r\n+                          </div>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                );\r\n+              })()}\r\n+            </div>\r\n+\r\n+            {/* Action Buttons */}\r\n+            {isEditing && (\r\n+              <div className=\"flex justify-end gap-2 mt-6\">\r\n+                <button\r\n+                  type=\"button\"\r\n+                  onClick={handleCancel}\r\n+                  className=\"btn btn-primary bg-[#1D372E] border-[#1D372E] btn-sm md:btn-md\"\r\n+                  disabled={isLoading}\r\n+                >\r\n+                  Cancel\r\n+                </button>\r\n+                <button\r\n+                  type=\"submit\"\r\n+                  className={`btn btn-primary bg-[#5CAF90] border-none text-white btn-sm md:btn-md ${\r\n+                    isLoading ? \"cursor-not-allowed\" : \"\"\r\n+                  }`}\r\n+                >\r\n+                  {isLoading ? (\r\n+                    <>\r\n+                      <span className=\"loading loading-spinner loading-xs\"></span>\r\n+                      Saving...\r\n+                    </>\r\n+                  ) : (\r\n+                    \"Save Changes\"\r\n+                  )}\r\n+                </button>\r\n+              </div>\r\n+            )}\r\n+          </form>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default PolicyDetailsSettings;\r\n"
                },
                {
                    "date": 1753159328971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,444 @@\n+import { useState, useEffect } from \"react\";\r\n+import { FaEdit, FaEye, FaEyeSlash } from \"react-icons/fa\";\r\n+import ReactQuill from \"react-quill-new\";\r\n+import \"react-quill-new/dist/quill.snow.css\";\r\n+import {\r\n+  fetchPolicyDetailsSetting,\r\n+  updatePolicyDetailsSetting,\r\n+} from \"../api/setting\";\r\n+import toast from \"react-hot-toast\";\r\n+\r\n+const PolicyDetailsSettings = () => {\r\n+  const [policyDetailsSetting, setPolicyDetailsSetting] = useState(null);\r\n+  const [isEditing, setIsEditing] = useState(false);\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+  const [showPreview, setShowPreview] = useState(false);\r\n+  const [activeTab, setActiveTab] = useState(\"legal\");\r\n+\r\n+  // Policy content states\r\n+  const [legalPolicyContent, setLegalPolicyContent] = useState(\"\");\r\n+  const [privacyPolicyContent, setPrivacyPolicyContent] = useState(\"\");\r\n+  const [securityPolicyContent, setSecurityPolicyContent] = useState(\"\");\r\n+  const [termsOfServiceContent, setTermsOfServiceContent] = useState(\"\");\r\n+\r\n+  // Quill editor configuration\r\n+  const quillModules = {\r\n+    toolbar: [\r\n+      [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n+      [\"bold\", \"italic\", \"underline\", \"strike\"],\r\n+      [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n+      [{ indent: \"-1\" }, { indent: \"+1\" }],\r\n+      [{ align: [] }],\r\n+      [\"link\", \"blockquote\", \"code-block\"],\r\n+      [{ color: [] }, { background: [] }],\r\n+      [\"clean\"],\r\n+    ],\r\n+  };\r\n+\r\n+  const quillFormats = [\r\n+    \"header\",\r\n+    \"bold\",\r\n+    \"italic\",\r\n+    \"underline\",\r\n+    \"strike\",\r\n+    \"list\",\r\n+    \"indent\",\r\n+    \"align\",\r\n+    \"link\",\r\n+    \"blockquote\",\r\n+    \"code-block\",\r\n+    \"color\",\r\n+    \"background\",\r\n+  ];\r\n+\r\n+  // Policy tabs configuration\r\n+  const policyTabs = [\r\n+    {\r\n+      id: \"legal\",\r\n+      label: \"Legal Policy\",\r\n+      content: legalPolicyContent,\r\n+      setter: setLegalPolicyContent,\r\n+    },\r\n+    {\r\n+      id: \"privacy\",\r\n+      label: \"Privacy Policy\",\r\n+      content: privacyPolicyContent,\r\n+      setter: setPrivacyPolicyContent,\r\n+    },\r\n+    {\r\n+      id: \"security\",\r\n+      label: \"Security Policy\",\r\n+      content: securityPolicyContent,\r\n+      setter: setSecurityPolicyContent,\r\n+    },\r\n+    {\r\n+      id: \"terms\",\r\n+      label: \"Terms of Service\",\r\n+      content: termsOfServiceContent,\r\n+      setter: setTermsOfServiceContent,\r\n+    },\r\n+  ];\r\n+\r\n+  // Check if all required fields are filled\r\n+  const canShowPreview = () => {\r\n+    const stripHtml = (html) => {\r\n+      // Remove HTML tags and check if there's actual text content\r\n+      const temp = document.createElement(\"div\");\r\n+      temp.innerHTML = html;\r\n+      return temp.textContent || temp.innerText || \"\";\r\n+    };\r\n+\r\n+    return (\r\n+      stripHtml(legalPolicyContent).trim() &&\r\n+      stripHtml(privacyPolicyContent).trim() &&\r\n+      stripHtml(securityPolicyContent).trim() &&\r\n+      stripHtml(termsOfServiceContent).trim()\r\n+    );\r\n+  };\r\n+\r\n+  // Toggle preview based on validation\r\n+  const togglePreview = () => {\r\n+    if (!showPreview) {\r\n+      if (canShowPreview()) {\r\n+        setShowPreview(true);\r\n+        // Reset to first tab when showing preview\r\n+        setActiveTab(\"legal\");\r\n+      } else {\r\n+        toast.error(\r\n+          \"Please fill in all policy content before viewing the preview\"\r\n+        );\r\n+      }\r\n+    } else {\r\n+      setShowPreview(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Load policy details settings when component mounts\r\n+  useEffect(() => {\r\n+    async function loadPolicyDetailsSetting() {\r\n+      try {\r\n+        setIsLoading(true);\r\n+        const data = await fetchPolicyDetailsSetting();\r\n+        if (data) {\r\n+          setPolicyDetailsSetting(data);\r\n+          setLegalPolicyContent(data.Legal_Policy_Content || \"\");\r\n+          setPrivacyPolicyContent(data.Privacy_Policy_Content || \"\");\r\n+          setSecurityPolicyContent(data.Security_Policy_Content || \"\");\r\n+          setTermsOfServiceContent(data.Terms_Of_Service_Content || \"\");\r\n+        }\r\n+      } catch (error) {\r\n+        toast.error(error.message || \"Failed to load policy details settings\");\r\n+      } finally {\r\n+        setIsLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    loadPolicyDetailsSetting();\r\n+  }, []);\r\n+\r\n+  // Edit handler\r\n+  const handleEdit = () => {\r\n+    setIsEditing(true);\r\n+    setShowPreview(false);\r\n+    // Reset to first tab when editing\r\n+    setActiveTab(\"legal\");\r\n+\r\n+    // Force refresh of ReactQuill editor\r\n+    setTimeout(() => {\r\n+      window.dispatchEvent(new Event(\"resize\"));\r\n+    }, 100);\r\n+  };\r\n+\r\n+  // Tab switch handler\r\n+  const handleTabSwitch = (tabId) => {\r\n+    setActiveTab(tabId);\r\n+    // If in editing mode, refresh the editor after tab switch\r\n+    if (isEditing) {\r\n+      setTimeout(() => {\r\n+        window.dispatchEvent(new Event(\"resize\"));\r\n+      }, 50);\r\n+    }\r\n+  };\r\n+\r\n+  // Save handler\r\n+  const handleSave = async (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (!canShowPreview()) {\r\n+      toast.error(\"Please fill in all policy content\");\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      setIsLoading(true);\r\n+\r\n+      const policyData = {\r\n+        legalPolicyContent,\r\n+        privacyPolicyContent,\r\n+        securityPolicyContent,\r\n+        termsOfServiceContent,\r\n+      };\r\n+\r\n+      const updatedSetting = await updatePolicyDetailsSetting(policyData);\r\n+      toast.success(\"Policy details saved successfully\");\r\n+      setPolicyDetailsSetting(updatedSetting);\r\n+      setIsEditing(false);\r\n+    } catch (error) {\r\n+      toast.error(error.message || \"Failed to save policy details\");\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Cancel handler\r\n+  const handleCancel = () => {\r\n+    setIsEditing(false);\r\n+    setShowPreview(false);\r\n+    setActiveTab(\"legal\");\r\n+\r\n+    if (policyDetailsSetting) {\r\n+      // Restore state from policyDetailsSetting\r\n+      setLegalPolicyContent(policyDetailsSetting.Legal_Policy_Content || \"\");\r\n+      setPrivacyPolicyContent(\r\n+        policyDetailsSetting.Privacy_Policy_Content || \"\"\r\n+      );\r\n+      setSecurityPolicyContent(\r\n+        policyDetailsSetting.Security_Policy_Content || \"\"\r\n+      );\r\n+      setTermsOfServiceContent(\r\n+        policyDetailsSetting.Terms_Of_Service_Content || \"\"\r\n+      );\r\n+    } else {\r\n+      // If no policyDetailsSetting, reset to initial state\r\n+      setLegalPolicyContent(\"\");\r\n+      setPrivacyPolicyContent(\"\");\r\n+      setSecurityPolicyContent(\"\");\r\n+      setTermsOfServiceContent(\"\");\r\n+    }\r\n+  };\r\n+\r\n+  // Get current active tab content\r\n+  const getCurrentTabContent = () => {\r\n+    switch (activeTab) {\r\n+      case \"legal\":\r\n+        return legalPolicyContent;\r\n+      case \"privacy\":\r\n+        return privacyPolicyContent;\r\n+      case \"security\":\r\n+        return securityPolicyContent;\r\n+      case \"terms\":\r\n+        return termsOfServiceContent;\r\n+      default:\r\n+        return \"\";\r\n+    }\r\n+  };\r\n+\r\n+  // Preview Component\r\n+  const PolicyPreview = () => {\r\n+    const renderTabContent = () => {\r\n+      const content = getCurrentTabContent();\r\n+      return (\r\n+        <div\r\n+          className=\"prose max-w-none\"\r\n+          dangerouslySetInnerHTML={{ __html: content }}\r\n+        />\r\n+      );\r\n+    };\r\n+\r\n+    return (\r\n+      <div className=\"space-y-6\">\r\n+        <h3 className=\"text-lg font-semibold text-[#1D372E] mb-4\">\r\n+          Policy Details Preview\r\n+        </h3>\r\n+\r\n+        {/* Tab Navigation */}\r\n+        <div className=\"flex flex-wrap gap-2 border-b border-gray-200 mb-6\">\r\n+          {policyTabs.map((tab) => (\r\n+            <button\r\n+              key={tab.id}\r\n+              type=\"button\"\r\n+              onClick={() => handleTabSwitch(tab.id)}\r\n+              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n+                activeTab === tab.id\r\n+                  ? \"border-[#5CAF90] text-[#5CAF90]\"\r\n+                  : \"border-transparent text-gray-500 hover:text-gray-700\"\r\n+              }`}\r\n+            >\r\n+              {tab.label}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        {/* Tab Content */}\r\n+        <div className=\"bg-white p-6 text-[#1D372E] rounded-lg border border-gray-200 min-h-[400px]\">\r\n+          {renderTabContent()}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  if (isLoading && !policyDetailsSetting) {\r\n+    return (\r\n+      <div className=\"card bg-base-100 shadow-md\">\r\n+        <div className=\"card-body\">\r\n+          <div className=\"flex justify-center items-center h-40\">\r\n+            <span className=\"loading loading-spinner loading-lg text-primary\"></span>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"card bg-white shadow-md relative\">\r\n+      <div className=\"card-body\">\r\n+        {/* Header Section */}\r\n+        <div className=\"mb-6\">\r\n+          <div className=\"flex items-center gap-2 mb-4\">\r\n+            <div className=\"w-1 h-6 bg-[#5CAF90]\"></div>\r\n+            <h2 className=\"text-lg md:text-xl font-bold text-[#1D372E]\">\r\n+              Manage Policy Details\r\n+            </h2>\r\n+          </div>\r\n+          {/* Action Buttons */}\r\n+          <div className=\"flex gap-2 md:absolute md:top-6 md:right-6\">\r\n+            {!isEditing && !showPreview && (\r\n+              <button\r\n+                onClick={handleEdit}\r\n+                className=\"btn btn-primary gap-2 bg-[#5CAF90] border-[#5CAF90] hover:bg-[#4a9a7d] btn-sm md:btn-md\"\r\n+              >\r\n+                <FaEdit className=\"w-4 h-4\" /> Edit\r\n+              </button>\r\n+            )}\r\n+            {!isEditing || canShowPreview() ? (\r\n+              <button\r\n+                onClick={togglePreview}\r\n+                className={`btn gap-2 btn-sm md:btn-md ${\r\n+                  showPreview\r\n+                    ? \"bg-[#1D372E] border-[#1D372E] hover:bg-[#162a23]\"\r\n+                    : \"bg-[#5CAF90] border-[#5CAF90] hover:bg-[#4a9a7d]\"\r\n+                }`}\r\n+              >\r\n+                {showPreview ? (\r\n+                  <>\r\n+                    <FaEyeSlash className=\"w-4 h-4\" /> Hide Preview\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <FaEye className=\"w-4 h-4\" /> Show Preview\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            ) : null}\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {showPreview ? (\r\n+          <PolicyPreview />\r\n+        ) : (\r\n+          <form onSubmit={handleSave}>\r\n+            {/* Tab Navigation */}\r\n+            <div className=\"flex flex-wrap gap-2 border-b border-gray-200 mb-6\">\r\n+              {policyTabs.map((tab) => (\r\n+                <button\r\n+                  key={tab.id}\r\n+                  type=\"button\"\r\n+                  onClick={() => setActiveTab(tab.id)}\r\n+                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n+                    activeTab === tab.id\r\n+                      ? \"border-[#5CAF90] text-[#5CAF90]\"\r\n+                      : \"border-transparent text-gray-500 hover:text-gray-700\"\r\n+                  }`}\r\n+                >\r\n+                  {tab.label}\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+\r\n+            {/* Tab Content */}\r\n+            <div className=\"mb-8\">\r\n+              {/* Only render the active tab's content */}\r\n+              {(() => {\r\n+                const currentTab = policyTabs.find(\r\n+                  (tab) => tab.id === activeTab\r\n+                );\r\n+                if (!currentTab) return null;\r\n+\r\n+                return (\r\n+                  <div className=\"form-control\">\r\n+                    <label className=\"label\">\r\n+                      <span className=\"label-text text-[#1D372E] text-lg font-medium\">\r\n+                        {currentTab.label} Content\r\n+                      </span>\r\n+                    </label>\r\n+                    {isEditing ? (\r\n+                      <div className=\"border border-[#1D372E] text-[#1D372E] rounded-lg\">\r\n+                        <ReactQuill\r\n+                          key={`${currentTab.id}-${isEditing}`}\r\n+                          value={currentTab.content}\r\n+                          onChange={currentTab.setter}\r\n+                          modules={quillModules}\r\n+                          formats={quillFormats}\r\n+                          theme=\"snow\"\r\n+                          style={{ minHeight: \"300px\" }}\r\n+                          placeholder={`Enter ${currentTab.label.toLowerCase()} content...`}\r\n+                        />\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"border border-[#1D372E] rounded-lg p-4 bg-white min-h-[300px] overflow-auto\">\r\n+                        {currentTab.content ? (\r\n+                          <div\r\n+                            className=\"prose max-w-none text-[#1D372E]\"\r\n+                            dangerouslySetInnerHTML={{\r\n+                              __html: currentTab.content,\r\n+                            }}\r\n+                          />\r\n+                        ) : (\r\n+                          <div className=\"text-gray-400 italic\">\r\n+                            No content available for{\" \"}\r\n+                            {currentTab.label.toLowerCase()}\r\n+                          </div>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                );\r\n+              })()}\r\n+            </div>\r\n+\r\n+            {/* Action Buttons */}\r\n+            {isEditing && (\r\n+              <div className=\"flex justify-end gap-2 mt-6\">\r\n+                <button\r\n+                  type=\"button\"\r\n+                  onClick={handleCancel}\r\n+                  className=\"btn btn-primary bg-[#1D372E] border-[#1D372E] btn-sm md:btn-md\"\r\n+                  disabled={isLoading}\r\n+                >\r\n+                  Cancel\r\n+                </button>\r\n+                <button\r\n+                  type=\"submit\"\r\n+                  className={`btn btn-primary bg-[#5CAF90] border-none text-white btn-sm md:btn-md ${\r\n+                    isLoading ? \"cursor-not-allowed\" : \"\"\r\n+                  }`}\r\n+                >\r\n+                  {isLoading ? (\r\n+                    <>\r\n+                      <span className=\"loading loading-spinner loading-xs\"></span>\r\n+                      Saving...\r\n+                    </>\r\n+                  ) : (\r\n+                    \"Save Changes\"\r\n+                  )}\r\n+                </button>\r\n+              </div>\r\n+            )}\r\n+          </form>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default PolicyDetailsSettings;\r\n"
                }
            ],
            "date": 1753159147772,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from \"react\";\r\nimport { FaEdit, FaEye, FaEyeSlash } from \"react-icons/fa\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill-new/dist/quill.snow.css\";\r\nimport {\r\n  fetchPolicyDetailsSetting,\r\n  updatePolicyDetailsSetting,\r\n} from \"../api/setting\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst PolicyDetailsSettings = () => {\r\n  const [policyDetailsSetting, setPolicyDetailsSetting] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(\"legal\");\r\n\r\n  // Policy content states\r\n  const [legalPolicyContent, setLegalPolicyContent] = useState(\"\");\r\n  const [privacyPolicyContent, setPrivacyPolicyContent] = useState(\"\");\r\n  const [securityPolicyContent, setSecurityPolicyContent] = useState(\"\");\r\n  const [termsOfServiceContent, setTermsOfServiceContent] = useState(\"\");\r\n\r\n  // Quill editor configuration\r\n  const quillModules = {\r\n    toolbar: [\r\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n      [\"bold\", \"italic\", \"underline\", \"strike\"],\r\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n      [{ indent: \"-1\" }, { indent: \"+1\" }],\r\n      [{ align: [] }],\r\n      [\"link\", \"blockquote\", \"code-block\"],\r\n      [{ color: [] }, { background: [] }],\r\n      [\"clean\"],\r\n    ],\r\n  };\r\n\r\n  const quillFormats = [\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"list\",\r\n    \"indent\",\r\n    \"align\",\r\n    \"link\",\r\n    \"blockquote\",\r\n    \"code-block\",\r\n    \"color\",\r\n    \"background\",\r\n  ];\r\n\r\n  // Policy tabs configuration\r\n  const policyTabs = [\r\n    {\r\n      id: \"legal\",\r\n      label: \"Legal Policy\",\r\n      content: legalPolicyContent,\r\n      setter: setLegalPolicyContent,\r\n    },\r\n    {\r\n      id: \"privacy\",\r\n      label: \"Privacy Policy\",\r\n      content: privacyPolicyContent,\r\n      setter: setPrivacyPolicyContent,\r\n    },\r\n    {\r\n      id: \"security\",\r\n      label: \"Security Policy\",\r\n      content: securityPolicyContent,\r\n      setter: setSecurityPolicyContent,\r\n    },\r\n    {\r\n      id: \"terms\",\r\n      label: \"Terms of Service\",\r\n      content: termsOfServiceContent,\r\n      setter: setTermsOfServiceContent,\r\n    },\r\n  ];\r\n\r\n  // Check if all required fields are filled\r\n  const canShowPreview = () => {\r\n    const stripHtml = (html) => {\r\n      // Remove HTML tags and check if there's actual text content\r\n      const temp = document.createElement(\"div\");\r\n      temp.innerHTML = html;\r\n      return temp.textContent || temp.innerText || \"\";\r\n    };\r\n\r\n    return (\r\n      stripHtml(legalPolicyContent).trim() &&\r\n      stripHtml(privacyPolicyContent).trim() &&\r\n      stripHtml(securityPolicyContent).trim() &&\r\n      stripHtml(termsOfServiceContent).trim()\r\n    );\r\n  };\r\n\r\n  // Toggle preview based on validation\r\n  const togglePreview = () => {\r\n    if (!showPreview) {\r\n      if (canShowPreview()) {\r\n        setShowPreview(true);\r\n        // Reset to first tab when showing preview\r\n        setActiveTab(\"legal\");\r\n      } else {\r\n        toast.error(\r\n          \"Please fill in all policy content before viewing the preview\"\r\n        );\r\n      }\r\n    } else {\r\n      setShowPreview(false);\r\n    }\r\n  };\r\n\r\n  // Load policy details settings when component mounts\r\n  useEffect(() => {\r\n    async function loadPolicyDetailsSetting() {\r\n      try {\r\n        setIsLoading(true);\r\n        const data = await fetchPolicyDetailsSetting();\r\n        if (data) {\r\n          setPolicyDetailsSetting(data);\r\n          setLegalPolicyContent(data.Legal_Policy_Content || \"\");\r\n          setPrivacyPolicyContent(data.Privacy_Policy_Content || \"\");\r\n          setSecurityPolicyContent(data.Security_Policy_Content || \"\");\r\n          setTermsOfServiceContent(data.Terms_Of_Service_Content || \"\");\r\n        }\r\n      } catch (error) {\r\n        toast.error(error.message || \"Failed to load policy details settings\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    loadPolicyDetailsSetting();\r\n  }, []);\r\n\r\n  // Edit handler\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n    setShowPreview(false);\r\n    // Reset to first tab when editing\r\n    setActiveTab(\"legal\");\r\n\r\n    // Force refresh of ReactQuill editor\r\n    setTimeout(() => {\r\n      window.dispatchEvent(new Event(\"resize\"));\r\n    }, 100);\r\n  };\r\n\r\n  // Tab switch handler\r\n  const handleTabSwitch = (tabId) => {\r\n    setActiveTab(tabId);\r\n    // If in editing mode, refresh the editor after tab switch\r\n    if (isEditing) {\r\n      setTimeout(() => {\r\n        window.dispatchEvent(new Event(\"resize\"));\r\n      }, 50);\r\n    }\r\n  };\r\n\r\n  // Save handler\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!canShowPreview()) {\r\n      toast.error(\"Please fill in all policy content\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      const policyData = {\r\n        legalPolicyContent,\r\n        privacyPolicyContent,\r\n        securityPolicyContent,\r\n        termsOfServiceContent,\r\n      };\r\n\r\n      const updatedSetting = await updatePolicyDetailsSetting(policyData);\r\n      toast.success(\"Policy details saved successfully\");\r\n      setPolicyDetailsSetting(updatedSetting);\r\n      setIsEditing(false);\r\n    } catch (error) {\r\n      toast.error(error.message || \"Failed to save policy details\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Cancel handler\r\n  const handleCancel = () => {\r\n    setIsEditing(false);\r\n    setShowPreview(false);\r\n    setActiveTab(\"legal\");\r\n\r\n    if (policyDetailsSetting) {\r\n      // Restore state from policyDetailsSetting\r\n      setLegalPolicyContent(policyDetailsSetting.Legal_Policy_Content || \"\");\r\n      setPrivacyPolicyContent(\r\n        policyDetailsSetting.Privacy_Policy_Content || \"\"\r\n      );\r\n      setSecurityPolicyContent(\r\n        policyDetailsSetting.Security_Policy_Content || \"\"\r\n      );\r\n      setTermsOfServiceContent(\r\n        policyDetailsSetting.Terms_Of_Service_Content || \"\"\r\n      );\r\n    } else {\r\n      // If no policyDetailsSetting, reset to initial state\r\n      setLegalPolicyContent(\"\");\r\n      setPrivacyPolicyContent(\"\");\r\n      setSecurityPolicyContent(\"\");\r\n      setTermsOfServiceContent(\"\");\r\n    }\r\n  };\r\n\r\n  // Get current active tab content\r\n  const getCurrentTabContent = () => {\r\n    switch (activeTab) {\r\n      case \"legal\":\r\n        return legalPolicyContent;\r\n      case \"privacy\":\r\n        return privacyPolicyContent;\r\n      case \"security\":\r\n        return securityPolicyContent;\r\n      case \"terms\":\r\n        return termsOfServiceContent;\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  // Preview Component\r\n  const PolicyPreview = () => {\r\n    const renderTabContent = () => {\r\n      const content = getCurrentTabContent();\r\n      return (\r\n        <div\r\n          className=\"prose max-w-none\"\r\n          dangerouslySetInnerHTML={{ __html: content }}\r\n        />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <h3 className=\"text-lg font-semibold text-[#1D372E] mb-4\">\r\n          Policy Details Preview\r\n        </h3>\r\n\r\n        {/* Tab Navigation */}\r\n        <div className=\"flex flex-wrap gap-2 border-b border-gray-200 mb-6\">\r\n          {policyTabs.map((tab) => (\r\n            <button\r\n              key={tab.id}\r\n              type=\"button\"\r\n              onClick={() => handleTabSwitch(tab.id)}\r\n              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n                activeTab === tab.id\r\n                  ? \"border-[#5CAF90] text-[#5CAF90]\"\r\n                  : \"border-transparent text-gray-500 hover:text-gray-700\"\r\n              }`}\r\n            >\r\n              {tab.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        <div className=\"bg-white p-6 text-[#1D372E] rounded-lg border border-gray-200 min-h-[400px]\">\r\n          {renderTabContent()}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (isLoading && !policyDetailsSetting) {\r\n    return (\r\n      <div className=\"card bg-base-100 shadow-md\">\r\n        <div className=\"card-body\">\r\n          <div className=\"flex justify-center items-center h-40\">\r\n            <span className=\"loading loading-spinner loading-lg text-primary\"></span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"card bg-white shadow-md relative\">\r\n      <div className=\"card-body\">\r\n        {/* Header Section */}\r\n        <div className=\"mb-6\">\r\n          <div className=\"flex items-center gap-2 mb-4\">\r\n            <div className=\"w-1 h-6 bg-[#5CAF90]\"></div>\r\n            <h2 className=\"text-lg md:text-xl font-bold text-[#1D372E]\">\r\n              Manage Policy Details\r\n            </h2>\r\n          </div>\r\n          {/* Action Buttons */}\r\n          <div className=\"flex gap-2 md:absolute md:top-6 md:right-6\">\r\n            {!isEditing && !showPreview && (\r\n              <button\r\n                onClick={handleEdit}\r\n                className=\"btn btn-primary gap-2 bg-[#5CAF90] border-[#5CAF90] hover:bg-[#4a9a7d] btn-sm md:btn-md\"\r\n              >\r\n                <FaEdit className=\"w-4 h-4\" /> Edit\r\n              </button>\r\n            )}\r\n            {!isEditing || canShowPreview() ? (\r\n              <button\r\n                onClick={togglePreview}\r\n                className={`btn gap-2 btn-sm md:btn-md ${\r\n                  showPreview\r\n                    ? \"bg-[#1D372E] border-[#1D372E] hover:bg-[#162a23]\"\r\n                    : \"bg-[#5CAF90] border-[#5CAF90] hover:bg-[#4a9a7d]\"\r\n                }`}\r\n              >\r\n                {showPreview ? (\r\n                  <>\r\n                    <FaEyeSlash className=\"w-4 h-4\" /> Hide Preview\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <FaEye className=\"w-4 h-4\" /> Show Preview\r\n                  </>\r\n                )}\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n\r\n        {showPreview ? (\r\n          <PolicyPreview />\r\n        ) : (\r\n          <form onSubmit={handleSave}>\r\n            {/* Tab Navigation */}\r\n            <div className=\"flex flex-wrap gap-2 border-b border-gray-200 mb-6\">\r\n              {policyTabs.map((tab) => (\r\n                <button\r\n                  key={tab.id}\r\n                  type=\"button\"\r\n                  onClick={() => setActiveTab(tab.id)}\r\n                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n                    activeTab === tab.id\r\n                      ? \"border-[#5CAF90] text-[#5CAF90]\"\r\n                      : \"border-transparent text-gray-500 hover:text-gray-700\"\r\n                  }`}\r\n                >\r\n                  {tab.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Tab Content */}\r\n            <div className=\"mb-8\">\r\n              {/* Only render the active tab's content */}\r\n              {(() => {\r\n                const currentTab = policyTabs.find(\r\n                  (tab) => tab.id === activeTab\r\n                );\r\n                if (!currentTab) return null;\r\n\r\n                return (\r\n                  <div className=\"form-control\">\r\n                    <label className=\"label\">\r\n                      <span className=\"label-text text-[#1D372E] text-lg font-medium\">\r\n                        {currentTab.label} Content\r\n                      </span>\r\n                    </label>\r\n                    {isEditing ? (\r\n                      <div className=\"border border-[#1D372E] text-[#1D372E] rounded-lg\">\r\n                        <ReactQuill\r\n                          key={`${currentTab.id}-${isEditing}`}\r\n                          value={currentTab.content}\r\n                          onChange={currentTab.setter}\r\n                          modules={quillModules}\r\n                          formats={quillFormats}\r\n                          theme=\"snow\"\r\n                          style={{ minHeight: \"300px\" }}\r\n                          placeholder={`Enter ${currentTab.label.toLowerCase()} content...`}\r\n                        />\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"border border-[#1D372E] rounded-lg p-4 bg-white min-h-[300px] overflow-auto\">\r\n                        {currentTab.content ? (\r\n                          <div\r\n                            className=\"prose max-w-none text-[#1D372E]\"\r\n                            dangerouslySetInnerHTML={{\r\n                              __html: currentTab.content,\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <div className=\"text-gray-400 italic\">\r\n                            No content available for{\" \"}\r\n                            {currentTab.label.toLowerCase()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })()}\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            {isEditing && (\r\n              <div className=\"flex justify-end gap-2 mt-6\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleCancel}\r\n                  className=\"btn btn-primary bg-[#1D372E] border-[#1D372E] btn-sm md:btn-md\"\r\n                  disabled={isLoading}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type=\"submit\"\r\n                  className={`btn btn-primary bg-[#5CAF90] border-none text-white btn-sm md:btn-md ${\r\n                    isLoading ? \"cursor-not-allowed\" : \"\"\r\n                  }`}\r\n                >\r\n                  {isLoading ? (\r\n                    <>\r\n                      <span className=\"loading loading-spinner loading-xs\"></span>\r\n                      Saving...\r\n                    </>\r\n                  ) : (\r\n                    \"Save Changes\"\r\n                  )}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PolicyDetailsSettings;\r\n"
        }
    ]
}